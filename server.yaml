AWSTemplateFormatVersion: "2010-09-09"
Description: "CI/CD Section"

Parameters: 
  Net:
    Description: Name for output exports
    Type: String 
    Default: UdacityProject
  EC2:
    Description: AMI Id of Instance
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/22.04/stable/20220420/amd64/hvm/ebs-gp2/ami-id'
  ec2InstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
    - t2.micro
    - t3.micro
  serverKey:
    Type: String
    Default: test1
  vpcCidr:
    Type: String 
    Default: "10.0.0.0/16"
  pubCidr:
    Type: String 
    Default: "10.0.1.0/24"
    # privCidr:
    # Type: String 
    # Default: "10.0.2.0/24"
  

Resources:
  serverRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Effect: Allow
          Principal: 
            Service:
            - ec2.amazonaws.com
          Action: 
          - 'sts:AssumeRole'
      ManagedPolicyArns: 
      - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
  serverProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
      - !Ref serverRole
  serverSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Allows only inbound access"
      GroupName: webaccessSG
      VpcId: !Ref myVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  myInstance: 
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2 
      InstanceType: !Ref ec2InstanceType
      NetworkInterfaces:
      - AssociatePublicIpAddress: True
        DeviceIndex: "0"
        GroupSet: 
        - !Ref serverSG
        SubnetId: !Ref pubSubnet
      KeyName: !Ref serverKey
      UserData:
       !Base64 |
        #!/bin/bash -ex
        apt-get update -y
        apt-get upgrade -y

  myVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref vpcCidr
  myIG: 
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Stack 
        Value: test
  myvpcGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref myIG 
      VpcId: !Ref myVPC
  pubSubnet:
    Type: AWS::EC2::Subnet 
    Properties: 
      CidrBlock: !Ref pubCidr
      VpcId: !Ref myVPC
      AvailabilityZone: "us-east-1a" 
      MapPublicIpOnLaunch: True 
  pubRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref myVPC
  pubRoute:
    Type: AWS::EC2::Route 
    Properties: 
      RouteTableId: !Ref pubRT
      GatewayId: !GetAtt  myIG.InternetGatewayId
      DestinationCidrBlock: "0.0.0.0/0"
  pubSubRTA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref pubRT 
      SubnetId: !Ref pubSubnet
  # pubSubNaclAsso:
  #   Type: AWS::EC2::SubnetNetworkAclAssociation
  #   Properties: 
  #     NetworkAclId: !Ref myNACL
  #     SubnetId: !Ref pubSubnet
  # privSubnet:
  #   Type: AWS::EC2::Subnet 
  #   Properties: 
  #     CidrBlock: !Ref privCidr
  #     VpcId: !Ref myVPC
  #     AvailabilityZone: "us-east-1a"
  # privRT:
  #   Type: AWS::EC2::RouteTable
  #   Properties:
  #     VpcId: !Ref myVPC

  # myNACL:
  #   Type: AWS::EC2::NetworkAcl
  #   Properties:
  #     VpcId: !Ref myVPC
  # InboundRule:
  #   Type: AWS::EC2::NetworkAclEntry
  #   Properties:
  #     NetworkAclId: !Ref myNACL
  #     RuleNumber: 100
  #     Protocol: 6
  #     RuleAction: allow
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 22
  #       To: 22





Outputs:
  VpcId: 
    Description: The ID of myVPC
    Value: !Ref myVPC
    Export:
      Name: !Sub ${Net}-VPCID
  InstanceIP:
    Description: The Ip address of EIP
    Value: !GetAtt myInstance.PublicIp 
    Export:
      Name: !Sub "${Net}-IPv4"    
  PubSubnetId:
    Description: The Id of my public subnet
    Value: !Ref pubSubnet
    Export: 
      Name: !Sub "${Net}-pubSubnet"  